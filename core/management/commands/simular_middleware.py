from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from core.models import Institucion, Miembro
from django.contrib.sessions.models import Session

User = get_user_model()

class Command(BaseCommand):
    help = 'Simular el funcionamiento del middleware para diagnosticar problemas'

    def add_arguments(self, parser):
        parser.add_argument(
            '--usuario',
            type=str,
            required=True,
            help='Email del usuario'
        )

    def handle(self, *args, **options):
        email = options['usuario']
        
        try:
            user = User.objects.get(email=email)
            self.stdout.write(f'üîç Usuario encontrado: {email}')
            self.stdout.write(f'  ‚Ä¢ Es superusuario: {user.is_superuser}')
            
            if user.is_superuser:
                self.stdout.write('‚úÖ Usuario es superusuario - no necesita instituci√≥n activa')
                return
            
            # Simular la l√≥gica del middleware
            self.stdout.write('\nüîß SIMULANDO MIDDLEWARE:')
            
            # 1. Verificar si hay instituci√≥n en sesi√≥n
            self.stdout.write('1Ô∏è‚É£  Verificando sesiones del usuario...')
            sesiones_usuario = []
            for sesion in Session.objects.all():
                try:
                    data = sesion.get_decoded()
                    user_id = data.get('_auth_user_id')
                    if user_id and str(user_id) == str(user.id):
                        sesiones_usuario.append(sesion)
                        institucion_id = data.get('institucion_id')
                        if institucion_id:
                            self.stdout.write(f'  üìã Sesi√≥n {sesion.session_key}: instituci√≥n_id = {institucion_id}')
                        else:
                            self.stdout.write(f'  üìã Sesi√≥n {sesion.session_key}: sin instituci√≥n')
                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è  Error en sesi√≥n {sesion.session_key}: {e}')
            
            if not sesiones_usuario:
                self.stdout.write('  ‚ùå No se encontraron sesiones para este usuario')
                return
            
            # 2. Verificar membres√≠as
            self.stdout.write('\n2Ô∏è‚É£  Verificando membres√≠as...')
            if hasattr(user, 'membresias'):
                membresias = user.membresias.select_related('institucion').all()
                self.stdout.write(f'  üìã Total de membres√≠as: {membresias.count()}')
                
                for m in membresias:
                    self.stdout.write(f'  ‚Ä¢ {m.institucion.nombre} (ID: {m.institucion.id}, Activa: {m.institucion.activa})')
                
                # Filtrar solo las activas
                membresias_activas = [m for m in membresias if m.institucion.activa]
                self.stdout.write(f'  ‚úÖ Membres√≠as activas: {len(membresias_activas)}')
                
                if len(membresias_activas) == 1:
                    # Solo 1 colegio activo ‚Üí asignar autom√°ticamente
                    institucion = membresias_activas[0].institucion
                    self.stdout.write(f'\n3Ô∏è‚É£  ASIGNACI√ìN AUTOM√ÅTICA:')
                    self.stdout.write(f'  üéØ Instituci√≥n √∫nica: {institucion.nombre} (ID: {institucion.id})')
                    
                    # Actualizar todas las sesiones del usuario
                    self.stdout.write('\n4Ô∏è‚É£  Actualizando sesiones...')
                    sesiones_actualizadas = 0
                    for sesion in sesiones_usuario:
                        try:
                            data = sesion.get_decoded()
                            data['institucion_id'] = institucion.id
                            sesion.session_data = sesion.encode(data)
                            sesion.save()
                            sesiones_actualizadas += 1
                            self.stdout.write(f'  ‚úÖ Sesi√≥n {sesion.session_key} actualizada con instituci√≥n {institucion.id}')
                        except Exception as e:
                            self.stdout.write(f'  ‚ùå Error al actualizar sesi√≥n {sesion.session_key}: {e}')
                    
                    if sesiones_actualizadas > 0:
                        self.stdout.write(f'\n‚úÖ RESULTADO:')
                        self.stdout.write(f'  ‚Ä¢ Se actualizaron {sesiones_actualizadas} sesiones')
                        self.stdout.write(f'  ‚Ä¢ Instituci√≥n activa: {institucion.nombre}')
                        self.stdout.write(f'  ‚Ä¢ request.institucion_activa_id = {institucion.id}')
                        self.stdout.write('\nüîÑ PR√ìXIMOS PASOS:')
                        self.stdout.write('  1. Recarga la p√°gina del admin')
                        self.stdout.write('  2. El bot√≥n "Agregar" deber√≠a aparecer ahora')
                        self.stdout.write('  3. La instituci√≥n se asignar√° autom√°ticamente')
                    else:
                        self.stdout.write('  ‚ùå No se pudieron actualizar las sesiones')
                        
                elif len(membresias_activas) > 1:
                    self.stdout.write('\n‚ö†Ô∏è  USUARIO CON M√öLTIPLES INSTITUCIONES:')
                    self.stdout.write('  ‚Ä¢ El usuario debe seleccionar manualmente su instituci√≥n')
                    self.stdout.write('  ‚Ä¢ Ve a /seleccionar-institucion/')
                else:
                    self.stdout.write('\n‚ùå USUARIO SIN MEMBRES√çAS ACTIVAS:')
                    self.stdout.write('  ‚Ä¢ No se puede asignar instituci√≥n autom√°ticamente')
                    
            else:
                self.stdout.write('  ‚ùå El usuario no tiene el modelo de membres√≠as')
                
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå Usuario {email} no encontrado'))
            return
        
        self.stdout.write('\n‚úÖ Simulaci√≥n completada')
















