from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from core.models import Institucion, Miembro
from django.contrib.sessions.models import Session
from django.utils import timezone

User = get_user_model()

class Command(BaseCommand):
    help = 'Diagnosticar el problema de asignaci√≥n autom√°tica de instituci√≥n al hacer login'

    def add_arguments(self, parser):
        parser.add_argument(
            '--usuario',
            type=str,
            required=True,
            help='Email del usuario a diagnosticar'
        )

    def handle(self, *args, **options):
        email = options['usuario']
        
        self.stdout.write('üîç DIAGN√ìSTICO DE LOGIN Y ASIGNACI√ìN DE INSTITUCI√ìN')
        self.stdout.write('=' * 60)
        
        try:
            user = User.objects.get(email=email)
            self.stdout.write(f'üë§ Usuario: {email}')
            self.stdout.write(f'  ‚Ä¢ ID: {user.id}')
            self.stdout.write(f'  ‚Ä¢ Es superusuario: {user.is_superuser}')
            self.stdout.write(f'  ‚Ä¢ Es staff: {user.is_staff}')
            self.stdout.write(f'  ‚Ä¢ Est√° activo: {user.is_active}')
            
            if user.is_superuser:
                self.stdout.write('‚úÖ Usuario es superusuario - no necesita instituci√≥n activa')
                return
            
            # Verificar membres√≠as
            self.stdout.write('\nüè¢ MEMBRES√çAS DEL USUARIO:')
            membresias = user.membresias.select_related("institucion").all()
            
            if not membresias.exists():
                self.stdout.write('‚ùå Usuario NO tiene ninguna membres√≠a')
                return
            
            for i, membresia in enumerate(membresias, 1):
                inst = membresia.institucion
                self.stdout.write(f'  {i}. {inst.nombre} (ID: {inst.id})')
                self.stdout.write(f'     ‚Ä¢ Rol: {membresia.get_rol_display()}')
                self.stdout.write(f'     ‚Ä¢ Fecha inicio: {inst.fecha_inicio}')
                self.stdout.write(f'     ‚Ä¢ Fecha fin: {inst.fecha_fin}')
                self.stdout.write(f'     ‚Ä¢ Est√° activa: {inst.activa}')
                self.stdout.write(f'     ‚Ä¢ Licencia v√°lida: {inst.fecha_fin >= timezone.now().date()}')
            
            # Simular la l√≥gica del middleware
            self.stdout.write('\nüîß SIMULANDO L√ìGICA DEL MIDDLEWARE:')
            
            # 1. Verificar si hay instituci√≥n en sesi√≥n
            self.stdout.write('1Ô∏è‚É£  Verificando sesiones del usuario...')
            sesiones_usuario = []
            
            for sesion in Session.objects.all():
                try:
                    data = sesion.get_decoded()
                    user_id = data.get('_auth_user_id')
                    
                    if user_id and str(user_id) == str(user.id):
                        sesiones_usuario.append(sesion)
                        institucion_id = data.get('institucion_id')
                        if institucion_id:
                            self.stdout.write(f'  üìã Sesi√≥n {sesion.session_key}: instituci√≥n_id = {institucion_id}')
                        else:
                            self.stdout.write(f'  üìã Sesi√≥n {sesion.session_key}: sin instituci√≥n')
                        
                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è  Error en sesi√≥n: {e}')
            
            if not sesiones_usuario:
                self.stdout.write('  üìã Usuario no tiene sesiones activas')
            
            # 2. Simular la l√≥gica de asignaci√≥n autom√°tica
            self.stdout.write('\n2Ô∏è‚É£  Simulando asignaci√≥n autom√°tica...')
            
            # Contar membres√≠as v√°lidas
            membresias_validas = [m for m in membresias if m.institucion.activa]
            
            if len(membresias_validas) == 1:
                inst = membresias_validas[0].institucion
                self.stdout.write(f'‚úÖ Usuario tiene EXACTAMENTE 1 instituci√≥n v√°lida: {inst.nombre}')
                self.stdout.write(f'   ‚Üí Deber√≠a asignarse autom√°ticamente')
                self.stdout.write(f'   ‚Üí instituci√≥n_id = {inst.id}')
            elif len(membresias_validas) > 1:
                self.stdout.write(f'‚ö†Ô∏è  Usuario tiene {len(membresias_validas)} instituciones v√°lidas')
                self.stdout.write(f'   ‚Üí Deber√≠a ir a pantalla de selecci√≥n')
            else:
                self.stdout.write(f'‚ùå Usuario NO tiene instituciones v√°lidas')
                self.stdout.write(f'   ‚Üí Todas las licencias han expirado')
            
            # 3. Verificar si hay alg√∫n problema con el modelo
            self.stdout.write('\n3Ô∏è‚É£  Verificando integridad del modelo...')
            
            for membresia in membresias:
                try:
                    # Verificar que la relaci√≥n funciona
                    inst = membresia.institucion
                    self.stdout.write(f'  ‚úÖ Relaci√≥n {membresia.usuario.email} ‚Üí {inst.nombre} OK')
                except Exception as e:
                    self.stdout.write(f'  ‚ùå Error en relaci√≥n: {e}')
            
            # 4. Recomendaciones
            self.stdout.write('\nüí° RECOMENDACIONES:')
            
            if len(membresias_validas) == 1:
                self.stdout.write('  ‚Ä¢ El usuario deber√≠a tener instituci√≥n asignada autom√°ticamente')
                self.stdout.write('  ‚Ä¢ Verificar que el middleware se ejecute despu√©s del login')
                self.stdout.write('  ‚Ä¢ Verificar que la sesi√≥n se guarde correctamente')
            elif len(membresias_validas) > 1:
                self.stdout.write('  ‚Ä¢ El usuario debe seleccionar instituci√≥n manualmente')
                self.stdout.write('  ‚Ä¢ Verificar que la vista de selecci√≥n funcione')
            else:
                self.stdout.write('  ‚Ä¢ Usuario no tiene instituciones v√°lidas')
                self.stdout.write('  ‚Ä¢ Contactar al administrador para renovar licencias')
                
        except User.DoesNotExist:
            self.stdout.write(f'‚ùå Usuario {email} no existe')
        except Exception as e:
            self.stdout.write(f'‚ùå Error durante el diagn√≥stico: {e}')























