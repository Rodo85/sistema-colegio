from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.contrib.sessions.models import Session
from core.models import Institucion, Miembro

User = get_user_model()

class Command(BaseCommand):
    help = 'Probar la sesi√≥n real del usuario y el middleware'

    def handle(self, *args, **options):
        self.stdout.write('üß™ PROBANDO SESI√ìN REAL DEL USUARIO')
        self.stdout.write('=' * 50)
        
        try:
            # 1. Verificar usuario
            user = User.objects.get(email='directormaximo@gmail.com')
            self.stdout.write(f'üë§ Usuario: {user.email}')
            self.stdout.write(f'  ‚Ä¢ ID: {user.id}')
            self.stdout.write(f'  ‚Ä¢ Es superusuario: {user.is_superuser}')
            
            if user.is_superuser:
                self.stdout.write('‚úÖ Usuario es superusuario - no necesita instituci√≥n activa')
                return
            
            # 2. Verificar membres√≠as
            membresias = user.membresias.select_related("institucion").all()
            self.stdout.write(f'\nüè¢ Membres√≠as: {membresias.count()}')
            
            for m in membresias:
                inst = m.institucion
                self.stdout.write(f'  ‚Ä¢ {inst.nombre} (ID: {inst.id}) - {m.get_rol_display()}')
                self.stdout.write(f'    Activa: {inst.activa}')
            
            # 3. Verificar sesiones reales
            self.stdout.write('\nüìã VERIFICANDO SESIONES REALES:')
            
            sesiones_usuario = []
            for sesion in Session.objects.all():
                try:
                    data = sesion.get_decoded()
                    user_id = data.get('_auth_user_id')
                    
                    if user_id and str(user_id) == str(user.id):
                        sesiones_usuario.append(sesion)
                        institucion_id = data.get('institucion_id')
                        if institucion_id:
                            self.stdout.write(f'  ‚úÖ Sesi√≥n {sesion.session_key}: instituci√≥n_id = {institucion_id}')
                            try:
                                inst = Institucion.objects.get(pk=institucion_id)
                                self.stdout.write(f'    ‚îî‚îÄ Instituci√≥n: {inst.nombre}')
                            except Institucion.DoesNotExist:
                                self.stdout.write(f'    ‚îî‚îÄ ‚ö†Ô∏è  Instituci√≥n ID {institucion_id} NO EXISTE')
                        else:
                            self.stdout.write(f'  ‚ö†Ô∏è  Sesi√≥n {sesion.session_key}: sin instituci√≥n')
                        
                except Exception as e:
                    self.stdout.write(f'  ‚ùå Error en sesi√≥n: {e}')
            
            if not sesiones_usuario:
                self.stdout.write('  üìã Usuario no tiene sesiones activas')
                return
            
            # 4. Simular middleware con sesi√≥n real
            self.stdout.write('\nüîß SIMULANDO MIDDLEWARE CON SESI√ìN REAL:')
            
            # Tomar la primera sesi√≥n del usuario
            sesion_real = sesiones_usuario[0]
            data_sesion = sesion_real.get_decoded()
            institucion_id_sesion = data_sesion.get('institucion_id')
            
            self.stdout.write(f'  üìã Usando sesi√≥n: {sesion_real.session_key}')
            self.stdout.write(f'  üìã Instituci√≥n en sesi√≥n: {institucion_id_sesion}')
            
            if institucion_id_sesion:
                try:
                    inst = Institucion.objects.get(pk=institucion_id_sesion)
                    self.stdout.write(f'  ‚úÖ Instituci√≥n encontrada: {inst.nombre}')
                    
                    # Verificar que sea la instituci√≥n correcta del usuario
                    if inst.id == membresias.first().institucion.id:
                        self.stdout.write(f'  ‚úÖ Instituci√≥n coincide con membres√≠a del usuario')
                    else:
                        self.stdout.write(f'  ‚ö†Ô∏è  Instituci√≥n NO coincide con membres√≠a del usuario')
                        
                except Institucion.DoesNotExist:
                    self.stdout.write(f'  ‚ùå Instituci√≥n ID {institucion_id_sesion} NO EXISTE')
            else:
                self.stdout.write(f'  ‚ùå No hay instituci√≥n en la sesi√≥n')
            
            # 5. Verificar estado del sistema
            self.stdout.write('\nüìä ESTADO DEL SISTEMA:')
            
            # Verificar si el usuario deber√≠a tener instituci√≥n asignada autom√°ticamente
            if membresias.count() == 1:
                inst = membresias.first().institucion
                if inst.activa:
                    self.stdout.write(f'  ‚úÖ Usuario deber√≠a tener instituci√≥n asignada autom√°ticamente')
                    self.stdout.write(f'  ‚úÖ Instituci√≥n esperada: {inst.nombre} (ID: {inst.id})')
                    
                    if institucion_id_sesion == inst.id:
                        self.stdout.write(f'  ‚úÖ Estado CORRECTO: Usuario tiene instituci√≥n asignada')
                    else:
                        self.stdout.write(f'  ‚ùå Estado INCORRECTO: Usuario NO tiene instituci√≥n asignada')
                        self.stdout.write(f'  üîß Problema: El middleware no est√° funcionando correctamente')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  Instituci√≥n no est√° activa: {inst.nombre}')
            elif membresias.count() > 1:
                self.stdout.write(f'  ‚ö†Ô∏è  Usuario tiene m√∫ltiples instituciones - debe seleccionar')
            else:
                self.stdout.write(f'  ‚ùå Usuario no tiene membres√≠as')
                
        except User.DoesNotExist:
            self.stdout.write(f'‚ùå Usuario directormaximo@gmail.com no existe')
        except Exception as e:
            self.stdout.write(f'‚ùå Error durante la prueba: {e}')
            import traceback
            self.stdout.write(traceback.format_exc())







