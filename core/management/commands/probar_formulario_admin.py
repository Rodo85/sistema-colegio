from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.test import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.contrib.auth.middleware import AuthenticationMiddleware
from core.middleware import InstitucionMiddleware
from core.models import Institucion, Miembro
from matricula.admin import PersonaContactoAdmin
from matricula.models import PersonaContacto

User = get_user_model()

class Command(BaseCommand):
    help = 'Probar c√≥mo Django Admin renderiza un formulario para verificar el campo instituci√≥n'

    def handle(self, *args, **options):
        self.stdout.write('üß™ PROBANDO FORMULARIO DE DJANGO ADMIN')
        self.stdout.write('=' * 50)
        
        try:
            # 1. Verificar usuario
            user = User.objects.get(email='directormaximo@gmail.com')
            self.stdout.write(f'üë§ Usuario: {user.email}')
            self.stdout.write(f'  ‚Ä¢ ID: {user.id}')
            self.stdout.write(f'  ‚Ä¢ Es superusuario: {user.is_superuser}')
            
            if user.is_superuser:
                self.stdout.write('‚úÖ Usuario es superusuario - no necesita instituci√≥n activa')
                return
            
            # 2. Verificar membres√≠as
            membresias = user.membresias.select_related("institucion").all()
            self.stdout.write(f'\nüè¢ Membres√≠as: {membresias.count()}')
            
            for m in membresias:
                inst = m.institucion
                self.stdout.write(f'  ‚Ä¢ {inst.nombre} (ID: {inst.id}) - {m.get_rol_display()}')
                self.stdout.write(f'    Activa: {inst.activa}')
            
            # 3. Simular request completo
            self.stdout.write('\nüîß Simulando request completo...')
            
            # Crear request
            factory = RequestFactory()
            request = factory.get('/admin/matricula/personacontacto/add/')
            
            # Aplicar middleware de sesi√≥n
            self.stdout.write('  üìû Aplicando SessionMiddleware...')
            session_middleware = SessionMiddleware(lambda req: None)
            session_middleware.process_request(request)
            request.session.save()
            self.stdout.write(f'  ‚úÖ Sesi√≥n creada: {request.session.session_key}')
            
            # Aplicar middleware de autenticaci√≥n
            self.stdout.write('  üìû Aplicando AuthenticationMiddleware...')
            auth_middleware = AuthenticationMiddleware(lambda req: None)
            auth_middleware.process_request(request)
            
            # Simular login exitoso
            request.user = user
            request.session['_auth_user_id'] = str(user.id)
            request.session['_auth_user_backend'] = 'django.contrib.auth.backends.ModelBackend'
            request.session.save()
            
            self.stdout.write(f'  ‚úÖ Usuario autenticado: {request.user.is_authenticated}')
            self.stdout.write(f'  ‚úÖ User ID en sesi√≥n: {request.session.get("_auth_user_id")}')
            
            # 4. Aplicar nuestro middleware
            self.stdout.write('\nüîß Aplicando InstitucionMiddleware...')
            
            # Crear middleware
            inst_middleware = InstitucionMiddleware(lambda req: None)
            
            # Simular process_request
            self.stdout.write('  üìû Ejecutando process_request...')
            inst_middleware.process_request(request)
            
            # Verificar estado despu√©s de process_request
            self.stdout.write(f'  üìä Despu√©s de process_request:')
            self.stdout.write(f'    ‚Ä¢ Instituci√≥n activa ID: {getattr(request, "institucion_activa_id", None)}')
            self.stdout.write(f'    ‚Ä¢ Instituci√≥n en sesi√≥n: {request.session.get("institucion_id")}')
            
            # 5. Simular Django Admin
            self.stdout.write('\nüîß Simulando Django Admin...')
            
            # Crear instancia del admin
            admin_instance = PersonaContactoAdmin(PersonaContacto, None)
            
            # Simular la creaci√≥n de un formulario
            self.stdout.write('  üìû Creando formulario...')
            
            # Obtener el formulario base
            form_class = admin_instance.get_form(request)
            self.stdout.write(f'  ‚úÖ Clase de formulario: {form_class.__name__}')
            
            # Crear instancia del formulario
            form = form_class()
            self.stdout.write(f'  ‚úÖ Formulario creado: {form}')
            
            # Verificar campos del formulario
            self.stdout.write('\nüìä CAMPOS DEL FORMULARIO:')
            for field_name, field in form.fields.items():
                self.stdout.write(f'  ‚Ä¢ {field_name}: {type(field).__name__}')
                
                # Si es el campo instituci√≥n, verificar detalles
                if field_name == 'institucion':
                    self.stdout.write(f'    - Widget: {type(field.widget).__name__}')
                    self.stdout.write(f'    - Queryset: {field.queryset}')
                    self.stdout.write(f'    - Initial: {field.initial}')
                    self.stdout.write(f'    - Required: {field.required}')
                    
                    # Verificar si el campo tiene opciones
                    if hasattr(field, 'choices'):
                        choices = list(field.choices)
                        self.stdout.write(f'    - Choices disponibles: {len(choices)}')
                        for choice in choices[:3]:  # Mostrar solo los primeros 3
                            self.stdout.write(f'      ‚Üí {choice}')
                        if len(choices) > 3:
                            self.stdout.write(f'      ... y {len(choices) - 3} m√°s')
            
            # 6. Verificar si el campo instituci√≥n tiene valor inicial
            self.stdout.write('\nüè¢ VERIFICACI√ìN DEL CAMPO INSTITUCI√ìN:')
            if 'institucion' in form.fields:
                field = form.fields['institucion']
                if field.initial:
                    self.stdout.write(f'  ‚úÖ Campo instituci√≥n tiene valor inicial: {field.initial}')
                    try:
                        inst = Institucion.objects.get(pk=field.initial)
                        self.stdout.write(f'  ‚úÖ Instituci√≥n inicial: {inst.nombre}')
                    except Institucion.DoesNotExist:
                        self.stdout.write(f'  ‚ùå Instituci√≥n inicial no existe en BD')
                else:
                    self.stdout.write(f'  ‚ùå Campo instituci√≥n NO tiene valor inicial')
                
                # Verificar queryset
                if field.queryset:
                    self.stdout.write(f'  üìã Queryset del campo: {field.queryset.count()} instituciones')
                    for inst in field.queryset:
                        self.stdout.write(f'    ‚Ä¢ {inst.nombre} (ID: {inst.id})')
                else:
                    self.stdout.write(f'  ‚ùå Queryset del campo est√° vac√≠o')
            else:
                self.stdout.write(f'  ‚ùå Campo instituci√≥n no existe en el formulario')
                
        except User.DoesNotExist:
            self.stdout.write(f'‚ùå Usuario directormaximo@gmail.com no existe')
        except Exception as e:
            self.stdout.write(f'‚ùå Error durante la prueba: {e}')
            import traceback
            self.stdout.write(traceback.format_exc())








